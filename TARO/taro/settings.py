"""
Django settings for taro project.

Generated by 'django-admin startproject' using Django 2.2.10.

For more information on this file, see https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import os
gettext = lambda s: s
DATA_DIR = os.path.dirname(os.path.dirname(__file__))

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^o+bd%(-*f)t#0vk5o&o+(l26qu21)*+z%utp!2b&$gjs1gf11'

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get('ENV', 'LOCAL') == 'LOCAL':
    DEBUG = True
else:
    DEBUG = False

ALLOWED_HOSTS = ['local.utexas.edu',
                 'apps-test.lib.utexas.edu',
                 '0.0.0.0',
                 'localhost',
                 'taro-qual.lib.utexas.edu',
                 'taro-test.gsc1-nat.lib.utexas.edu',
                 'txarchives.org',
                 'www.txarchives.org',
                 'taro-api'
                 ]

EMAIL_HOST = 'authenticated.relay.mail.utexas.edu'
EMAIL_PORT = 25
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', None)
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', None)
SERVER_EMAIL = os.environ.get('SERVER_EMAIL', None)
DEFAULT_FROM_EMAIL = 'noreply@austin.utexas.edu'
ADMINS = [
    ('POD SQUAD', 'LIT-Pod-Squad@austin.utexas.edu'),
]

ROOT_URLCONF = 'taro.taro_manager.urls'

WSGI_APPLICATION = 'wsgi.application'

LANGUAGE_CODE = 'en'

TIME_ZONE = 'America/Chicago'

USE_I18N = True

USE_L10N = True

USE_TZ = True

EAD_XSD = 'taro/taro_manager/ead.xsd'

STATIC_ROOT = os.path.join(BASE_DIR, os.environ.get('STATIC_ROOT', 'static'))
STATIC_URL = os.environ.get('STATIC_URL', '/api/static/')
STATICFILES_STORAGE = os.environ.get('STATICFILES_STORAGE', 'whitenoise.storage.CompressedStaticFilesStorage')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'taro/static'),
)

SITE_ID = 1

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'taro', 'templates'),],
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.template.context_processors.csrf',
                'django.template.context_processors.tz',
                'sekizai.context_processors.sekizai',
                'django.template.context_processors.static',
            ],
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader'
            ],
        },
    },
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.admin',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.staticfiles',
    'django.contrib.messages',
    'haystack',
    'sekizai',
    'treebeard',
    'filer',
    'easy_thumbnails',
    'rest_framework',
    'rest_framework_xml',
    'django_filters',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_email',
    'taro.taro_manager',
    'corsheaders',
    "sslserver",
    "rest_framework.authtoken",
]

LANGUAGES = (
    ## Customize this
    ('en', gettext('en')),
)

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': "haystack.backends.solr_backend.SolrEngine",
        'URL': os.environ.get('SOLR_URL', '') + os.environ.get('SOLR_COLLECTION', ''),
    },
}

try:
    from taro.local_settings import *   # pylint: disable=wildcard-import,unused-wildcard-import
    # Sending email to console for testing during local development
    if os.environ.get('LOCAL_EMAIL'):
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DATABASES = {
        'default': {
            'CONN_MAX_AGE': 0,
            'ENGINE': 'django.db.backends.sqlite3',
            'HOST': 'localhost',
            'NAME': 'project.db',
            'PASSWORD': '',
            'PORT': '',
            'USER': ''
        }
    }
except ImportError:
    # if local settings are not present, then get assume deployed in Rancher
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get("ITSMYSQL_NAME"),
            'USER': os.environ.get('ITSMYSQL_USER'),
            'PASSWORD': os.environ.get('ITSMYSQL_PASSWORD'),
            'HOST': os.environ.get('ITSMYSQL_HOST'),
            'PORT': '3306',
            'OPTIONS': {'ssl': {'ca': os.environ.get('LDAPTLS_CACERT')}},
        }
    }
    os.environ['TNS_ADMIN'] = os.path.join(BASE_DIR, 'taro', 'oracle')


MEDIA_URL = os.environ.get('MEDIA_URL', '')
MEDIA_ROOT = os.environ.get('MEDIA_ROOT', '')

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters'
)

X_FRAME_OPTIONS = 'SAMEORIGIN'

DEFAULT_AUTO_FIELD='django.db.models.AutoField'

HAYSTACK_ITERATOR_LOAD_PER_QUERY = int(os.environ.get('HAYSTACK_ITERATOR_LOAD_PER_QUERY', 100))

LOGIN_LINK = os.environ.get('LOGIN_DOMAIN')
LOGIN_URL = os.environ.get('LOGIN_DOMAIN')
LOGIN_REDIRECT_URL = os.environ.get('LOGIN_DOMAIN')
